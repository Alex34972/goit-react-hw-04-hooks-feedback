{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.js","components/statistics/Statistics.js","components/section/Section.js","components/notification/Notification.js","FeedbackStat.js","App.js","reportWebVitals.js","index.js","components/feedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","option","s","Btn","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Math","round","Section","title","children","Notification","message","FeedbackCounter","useState","setGood","setNeutral","setBad","countTotalFeedback","event","target","state","console","error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAyBeA,EAtBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKC,UAAU,UAAf,SACGF,EAAQG,KAAI,SAACC,GAAD,OACX,wBACEF,UAAWG,IAAEC,IACbC,KAAK,SACLC,KAAMJ,EAENK,QAASR,EALX,SAOGG,GAHIA,SCWAM,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,oBAAGb,UAAU,QAAb,kBAA2BS,KAC3B,oBAAGT,UAAU,QAAb,qBAA8BU,KAC9B,oBAAGV,UAAU,QAAb,iBAA0BW,KAC1B,oBAAGX,UAAU,QAAb,mBAA4BY,KAC5B,oBAAGZ,UAAU,QAAb,+BACqBc,KAAKC,MAAMF,GADhC,WCISG,EAXC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCEQC,EANM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCGE,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOZ,EAAP,KAAgBc,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOX,EAAP,KAAYc,EAAZ,KAEMC,EAAqB,WACzB,OAAOjB,EAAOC,EAAUC,GAwB1B,OACE,sBAAKX,UAAU,WAAf,UACE,cAAC,EAAD,CAASiB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEnB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAvBkB,SAAC4B,GAEzB,OADaA,EAAMC,OAAOtB,MAExB,IAAK,OACHiB,GAAQ,SAACM,GAAD,OAAWA,EAAQ,KAC3B,MACF,IAAK,UACHL,GAAW,SAACK,GAAD,OAAWA,EAAQ,KAC9B,MACF,IAAK,MACHJ,GAAO,SAACI,GAAD,OAAWA,EAAQ,KAC1B,MACF,QAEE,YADAC,QAAQC,cAaV,cAAC,EAAD,CAASd,MAAM,aAAf,SACGS,IAAuB,EACtB,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,IACPb,mBAnCAJ,GAAQA,EAAOC,EAAUC,GAAQ,MAsCnC,cAAC,EAAD,CAAcS,QAAQ,2BC7CjBY,MARf,WACE,OACE,mCACE,cAACX,EAAD,OCQSY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.8dc4b880.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./FeedbackOptions.module.css\";\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div className=\"buttons\">\n      {options.map((option) => (\n        <button\n          className={s.Btn}\n          type=\"button\"\n          name={option}\n          key={option}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <p className=\"title\">Good:{good}</p>\n      <p className=\"title\">Neutral:{neutral}</p>\n      <p className=\"title\">Bad:{bad}</p>\n      <p className=\"title\">Total:{total}</p>\n      <p className=\"title\">\n        Positive feedback:{Math.round(positivePercentage)}%\n      </p>\n    </div>\n  );\n};\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import { useState } from \"react\";\nimport FeedbackOptions from \"./components/feedbackOptions\";\nimport Statistics from \"./components/statistics\";\nimport Section from \"./components/section\";\nimport Notification from \"./components/notification\";\n\nexport default function FeedbackCounter() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return (good / (good + neutral + bad)) * 100;\n  };\n  const feedbackIncrement = (event) => {\n    const name = event.target.name;\n    switch (name) {\n      case \"good\":\n        setGood((state) => state + 1);\n        break;\n      case \"neutral\":\n        setNeutral((state) => state + 1);\n        break;\n      case \"bad\":\n        setBad((state) => state + 1);\n        break;\n      default:\n        console.error();\n        return;\n    }\n  };\n\n  return (\n    <div className=\"feedback\">\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={feedbackIncrement}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n","import FeedbackCounter from \"./FeedbackStat\";\nfunction App() {\n  return (\n    <>\n      <FeedbackCounter />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Btn\":\"FeedbackOptions_Btn__1C3jh\"};"],"sourceRoot":""}